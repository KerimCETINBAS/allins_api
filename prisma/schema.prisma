// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Address {
  id             Int       @id @default(autoincrement())
  createAt       DateTime  @default(now())
  updateAt       DateTime  @updatedAt()
  building       String    @db.VarChar(50)
  city           String    @db.VarChar(50)
  province       String    @db.VarChar(50)
  street         String    @db.VarChar(50)
  town           String    @db.VarChar(50)
  zip            String    @db.VarChar(50) @default("59851")
  description    String    @db.VarChar(200)
  name           String    @db.VarChar(50)
  buildingNum    String    @db.VarChar(50) 
  doorNum        String    @db.VarChar(50) 
  user           User      @relation(fields: [userId], references: [id])
  userId         String
}
enum Roles {
  CUSTOMER
  CARRIER
  ADMIN
}

model User {
  id              String    @id @default(cuid())
  registerAt      DateTime  @default(now())
  updateAt        DateTime  @updatedAt()
  address         Address[]
  email           String    @unique()   @db.Char(50) 
  phone           String    @unique()   @db.Char(20)
  firstName       String    @db.VarChar(50)
  lastName        String    @db.VarChar(50)
  tokens          Token[]
  orders          Order[]
  role            Roles     @default(value: CUSTOMER)
  password        String    
  isVerified      Boolean   @default(false)
  totpToken       String    @unique() @default("")
}

model Token {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt()
  isValid          Boolean  @default(true)
  user             User     @relation(fields: [userId], references: [id])
  userId           String
}

model Product {
  id                   Int        @id     @default(autoincrement())
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt()
  name                 String  @unique()   @db.VarChar(50)
  stock                Int        @db.SmallInt @default(0)
  description          String     @db.VarChar(200)
  price                Float
  // ingredients used in this product
  ingredients          Ingredient[] @relation(name: "ingredients")
 
  // available ingredients for this product
  extraIngredients     Ingredient[] @relation(name: "extraIngredients")

  
  // used in order
  orderItem OrderItem[]

  usedInMenu Menu? @relation(fields: [menuId], references: [id])
  menuId Int?
}


model Ingredient {
  id                  Int        @id @default(autoincrement())
  stock               Int        @db.SmallInt
  name                String     @db.VarChar(50)
  price               Float
  description         String     @db.VarChar(200)
  // products uses this ingredient
  usedByProduct       Product[] @relation("ingredients")

  // products uses this ingredients as extra ingredient
  usedByProductAsExtra Product[] @relation("extraIngredients")
 
}

enum OrderStatus {
  WAITING_FOR_CONFIRM
  PREPARE
  DELIVER
  FINISH
  CANCEL
}
model  Order {
  id           String        @id     @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt()
  user         User        @relation(fields: [userId], references: [id])
  userId       String
  status       OrderStatus @default(value: WAITING_FOR_CONFIRM)
  items        OrderItem[] 
  description  String      @db.VarChar(200)
  cancelReason String      @db.Char(50)
  type         OrderType
}

enum OrderType {
  ONLINE
  RESTAURANT
  COMETAKE
  OTHER
}

model OrderItem {
  id                     Int       @id @default(autoincrement())
  product                Product   @relation(fields: [productId], references: [id])
  productId              Int
  notIncludedIngredients String[]
  extraIngredient        String[]
  order                  Order      @relation(fields: [orderId], references: [id])
  orderId                String
}

model Tables {
  id   Int @id @default(autoincrement())
  name String @db.VarChar(50)
}

model Settings {
   id      Int       @id @default(autoincrement())
   name    String
   value   String
}

model Image {
  id      String  @id @default(cuid())
  alt     String?
  src     String?
  description String?
  menu    Menu[]
}

model Menu {
  id Int @id @default(autoincrement())
  name String @db.VarChar(50)
  products Product[]
  image Image? @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId String?
  
}